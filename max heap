#include <iostream>
using namespace std;

class MaxHeap {
    int heap[100];  // Static array to hold the heap
    int size;

    void heapifyUp(int index) {
        int parent = (index - 1) / 2;
        if (index > 0 && heap[parent] < heap[index]) {
            swap(heap[parent], heap[index]);
            heapifyUp(parent);
        }
    }

    void heapifyDown(int index) {
        int largest = index;
        int left = 2 * index + 1;
        int right = 2 * index + 2;

        if (left < size && heap[left] > heap[largest])
            largest = left;
        if (right < size && heap[right] > heap[largest])
            largest = right;

        if (largest != index) {
            swap(heap[index], heap[largest]);
            heapifyDown(largest);
        }
    }

public:
    MaxHeap() {
        size = 0;
    }

    void insert(int value) {
        if (size == 100) {
            cout << "Heap is full!" << endl;
            return;
        }
        heap[size] = value;
        heapifyUp(size);
        size++;
    }

    void deleteRoot() {
        if (size == 0) {
            cout << "Heap is empty!" << endl;
            return;
        }

        cout << "Deleted root: " << heap[0] << endl;
        heap[0] = heap[size - 1];
        size--;
        heapifyDown(0);
    }

    void display() {
        cout << "Heap elements: ";
        for (int i = 0; i < size; i++)
            cout << heap[i] << " ";
        cout << endl;
    }
};

int main() {
    MaxHeap h;
    h.insert(10);
    h.insert(5);
    h.insert(20);
    h.insert(30);

    h.display();

    h.deleteRoot();
    h.display();

    return 0;
}
