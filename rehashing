#include <iostream>
#include <string>
using namespace std;

class MusicTrack {
public:
    int id;
    string track;
    string album;
};

class HashTable {
private:
    MusicTrack* table;
    int* status; // -1: empty, 1: filled, 2: deleted
    int capacity;
    int count;

    int hashFunction(int id) {
        return id % capacity;
    }

    void rehash() {
        int oldCapacity = capacity;
        capacity *= 2;
        MusicTrack* oldTable = table;
        int* oldStatus = status;

        table = new MusicTrack[capacity];
        status = new int[capacity];
        for (int i = 0; i < capacity; i++) status[i] = -1;
        count = 0;

        for (int i = 0; i < oldCapacity; i++) {
            if (oldStatus[i] == 1) {
                insert(oldTable[i].id, oldTable[i].track, oldTable[i].album);
            }
        }

        delete[] oldTable;
        delete[] oldStatus;
        cout << "Rehashing done! New capacity: " << capacity << endl;
    }

    float loadFactor() {
        return (float)count / capacity;
    }

public:
    HashTable(int size = 10) {
        capacity = size;
        count = 0;
        table = new MusicTrack[capacity];
        status = new int[capacity];
        for (int i = 0; i < capacity; i++) status[i] = -1;
    }

    ~HashTable() {
        delete[] table;
        delete[] status;
    }

    void insert(int id, string track, string album) {
        if (loadFactor() > 0.7) {
            cout<<"Rehashing is needed";
            rehash();
        }

        int index = hashFunction(id);
        for (int i = 0; i < capacity; i++) {
            int pos = (index + i) % capacity;
            if (status[pos] == -1 || status[pos] == 2) {
                table[pos].id = id;
                table[pos].track = track;
                table[pos].album = album;
                status[pos] = 1;
                count++;
                cout << "\nInserted at index " << pos << endl;
                return;
            }
            cout<<"\ncollision occured at index"<<pos;
        }
        cout << "Table is full!\n";
    }

    void search(int id) {
        int index = hashFunction(id);
        for (int i = 0; i < capacity; i++) {
            int pos = (index + i) % capacity;
            if (status[pos] == -1) break;
            if (status[pos] == 1 && table[pos].id == id) {
                cout << "Found: " << table[pos].track << " - " << table[pos].album << endl;
                return;
            }
            cout<<"\ncollision occured at index"<<pos;

        }
        cout << "Track not found.\n";
    }

    void update(int id, string newTrack, string newAlbum) {
        int index = hashFunction(id);
        for (int i = 0; i < capacity; i++) {
            int pos = (index + i) % capacity;
            if (status[pos] == -1) break;
            if (status[pos] == 1 && table[pos].id == id) {
                table[pos].track = newTrack;
                table[pos].album = newAlbum;
                cout << "Updated at index " << pos << endl;
                return;
            }
        }
        cout << "Track not found to update.\n";
    }

    void deletes(int id) {
        int index = hashFunction(id);
        for (int i = 0; i < capacity; i++) {
            int pos = (index + i) % capacity;
            if (status[pos] == -1) break;
            if (status[pos] == 1 && table[pos].id == id) {
                status[pos] = 2;
                count--;
                cout << "Deleted from index " << pos << endl;
                return;
            }
        }
        cout << "Track not found to delete.\n";
    }

    void display() {
        for (int i = 0; i < capacity; i++) {
            cout << i << ": ";
            if (status[i] == -1) cout << "Empty";
            else if (status[i] == 2) cout << "Deleted";
            else cout << table[i].id << " | " << table[i].track << " | " << table[i].album;
            cout << endl;
        }
    }
};

int main() {
    HashTable h;
    int choice, id;
    string track, album;

    do {
        cout << "\n1.Insert\n2.Search\n3.Update\n4.Delete\n5.Display\n6.Exit\nEnter choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter ID, Track, Album: ";
                cin >> id >> track >> album;
                h.insert(id, track, album);
                break;
            case 2:
                cout << "Enter ID to search: ";
                cin >> id;
                h.search(id);
                break;
            case 3:
                cout << "Enter ID to update: ";
                cin >> id >> track >> album;
                h.update(id, track, album);
                break;
            case 4:
                cout << "Enter ID to delete: ";
                cin >> id;
                h.deletes(id);
                break;
            case 5:
                h.display();
                break;
            case 6:
                cout << "Exit.\n";
                break;
            default:
                cout << "Invalid choice.\n";
        }
    } while (choice != 6);

    return 0;
}
